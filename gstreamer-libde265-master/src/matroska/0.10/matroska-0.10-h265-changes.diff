diff -Nur '--exclude=*~' '--exclude=*.o' '--exclude=README.txt' '--exclude=*.diff' '--exclude=*.vcproj' '--exclude=Makefile*' '--exclude=COPYING' gst-plugins-good/gst/matroska/lzo.c src/matroska/0.10/lzo.c
--- gst-plugins-good/gst/matroska/lzo.c	2014-06-23 18:08:32.000000000 +0200
+++ src/matroska/0.10/lzo.c	2014-05-07 09:34:26.000000000 +0200
@@ -22,7 +22,7 @@
 #include <gst/gst.h>
 #include <stdlib.h>
 #include <string.h>
-#include "_stdint.h"
+#include <stdint.h>
 #include "lzo.h"
 
 /*! define if we may write up to 12 bytes beyond the output buffer */
diff -Nur '--exclude=*~' '--exclude=*.o' '--exclude=README.txt' '--exclude=*.diff' '--exclude=*.vcproj' '--exclude=Makefile*' '--exclude=COPYING' gst-plugins-good/gst/matroska/matroska-demux.c src/matroska/0.10/matroska-demux.c
--- gst-plugins-good/gst/matroska/matroska-demux.c	2014-06-23 18:21:36.000000000 +0200
+++ src/matroska/0.10/matroska-demux.c	2014-07-07 17:03:53.000000000 +0200
@@ -69,6 +69,7 @@
 
 #include "matroska-demux.h"
 #include "matroska-ids.h"
+#include "../../common/codec-utils.h"
 
 GST_DEBUG_CATEGORY_STATIC (matroskademux_debug);
 #define GST_CAT_DEFAULT matroskademux_debug
@@ -122,7 +123,7 @@
         "subpicture/x-pgs; subtitle/x-kate; " "application/x-subtitle-unknown")
     );
 
-static GstFlowReturn gst_matroska_demux_parse_id (GstMatroskaDemux * demux,
+static GstFlowReturn gst_matroska_demux_parse_id (GstMatroskaDemuxH265 * demux,
     guint32 id, guint64 length, guint needed);
 
 /* element functions */
@@ -138,8 +139,8 @@
     gboolean active);
 static gboolean gst_matroska_demux_sink_activate (GstPad * sinkpad);
 
-static gboolean gst_matroska_demux_handle_seek_event (GstMatroskaDemux * demux,
-    GstPad * pad, GstEvent * event);
+static gboolean gst_matroska_demux_handle_seek_event (GstMatroskaDemuxH265 *
+    demux, GstPad * pad, GstEvent * event);
 static gboolean gst_matroska_demux_handle_src_event (GstPad * pad,
     GstEvent * event);
 static const GstQueryType *gst_matroska_demux_get_src_query_types (GstPad *
@@ -172,7 +173,7 @@
 
 /* stream methods */
 static void gst_matroska_demux_reset (GstElement * element);
-static gboolean perform_seek_to_offset (GstMatroskaDemux * demux,
+static gboolean perform_seek_to_offset (GstMatroskaDemuxH265 * demux,
     gdouble rate, guint64 offset);
 
 /* gobject functions */
@@ -182,7 +183,7 @@
     guint prop_id, GValue * value, GParamSpec * pspec);
 
 GType gst_matroska_demux_get_type (void);
-GST_BOILERPLATE (GstMatroskaDemux, gst_matroska_demux, GstElement,
+GST_BOILERPLATE (GstMatroskaDemuxH265, gst_matroska_demux, GstElement,
     GST_TYPE_ELEMENT);
 
 static void
@@ -205,7 +206,7 @@
 static void
 gst_matroska_demux_finalize (GObject * object)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (object);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (object);
 
   if (demux->common.src) {
     g_ptr_array_free (demux->common.src, TRUE);
@@ -223,7 +224,7 @@
 }
 
 static void
-gst_matroska_demux_class_init (GstMatroskaDemuxClass * klass)
+gst_matroska_demux_class_init (GstMatroskaDemuxH265Class * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
   GstElementClass *gstelement_class = (GstElementClass *) klass;
@@ -256,8 +257,8 @@
 }
 
 static void
-gst_matroska_demux_init (GstMatroskaDemux * demux,
-    GstMatroskaDemuxClass * klass)
+gst_matroska_demux_init (GstMatroskaDemuxH265 * demux,
+    GstMatroskaDemuxH265Class * klass)
 {
   demux->common.sinkpad = gst_pad_new_from_static_template (&sink_templ,
       "sink");
@@ -324,7 +325,7 @@
  * Returns the aggregated GstFlowReturn.
  */
 static GstFlowReturn
-gst_matroska_demux_combine_flows (GstMatroskaDemux * demux,
+gst_matroska_demux_combine_flows (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * track, GstFlowReturn ret)
 {
   guint i;
@@ -367,7 +368,7 @@
 static void
 gst_matroska_demux_reset (GstElement * element)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
   guint i;
 
   GST_DEBUG_OBJECT (demux, "Resetting state");
@@ -522,7 +523,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_add_stream (GstMatroskaDemux * demux, GstEbmlRead * ebml)
+gst_matroska_demux_add_stream (GstMatroskaDemuxH265 * demux, GstEbmlRead * ebml)
 {
   GstElementClass *klass = GST_ELEMENT_GET_CLASS (demux);
   GstMatroskaTrackContext *context;
@@ -1359,7 +1360,7 @@
 }
 
 static gboolean
-gst_matroska_demux_query (GstMatroskaDemux * demux, GstPad * pad,
+gst_matroska_demux_query (GstMatroskaDemuxH265 * demux, GstPad * pad,
     GstQuery * query)
 {
   gboolean res = FALSE;
@@ -1469,7 +1470,7 @@
 gst_matroska_demux_handle_src_query (GstPad * pad, GstQuery * query)
 {
   gboolean ret;
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (gst_pad_get_parent (pad));
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (gst_pad_get_parent (pad));
 
   ret = gst_matroska_demux_query (demux, pad, query);
 
@@ -1482,7 +1483,7 @@
  * otherwise TRUE (whatever the outcome of event sending),
  * takes ownership of the passed event! */
 static gboolean
-gst_matroska_demux_send_event (GstMatroskaDemux * demux, GstEvent * event)
+gst_matroska_demux_send_event (GstMatroskaDemuxH265 * demux, GstEvent * event)
 {
   gboolean is_newsegment;
   gboolean ret = FALSE;
@@ -1531,7 +1532,7 @@
 static gboolean
 gst_matroska_demux_element_send_event (GstElement * element, GstEvent * event)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
   gboolean res;
 
   g_return_val_if_fail (event != NULL, FALSE);
@@ -1548,7 +1549,7 @@
 }
 
 static gboolean
-gst_matroska_demux_move_to_entry (GstMatroskaDemux * demux,
+gst_matroska_demux_move_to_entry (GstMatroskaDemuxH265 * demux,
     GstMatroskaIndex * entry, gboolean reset, gboolean update)
 {
   gint i;
@@ -1606,7 +1607,7 @@
 /* searches for a cluster start from @pos,
  * return GST_FLOW_OK and cluster position in @pos if found */
 static GstFlowReturn
-gst_matroska_demux_search_cluster (GstMatroskaDemux * demux, gint64 * pos)
+gst_matroska_demux_search_cluster (GstMatroskaDemuxH265 * demux, gint64 * pos)
 {
   gint64 newpos = *pos;
   gint64 orig_offset;
@@ -1724,7 +1725,7 @@
 /* bisect and scan through file for cluster starting before @time,
  * returns fake index entry with corresponding info on cluster */
 static GstMatroskaIndex *
-gst_matroska_demux_search_pos (GstMatroskaDemux * demux, GstClockTime time)
+gst_matroska_demux_search_pos (GstMatroskaDemuxH265 * demux, GstClockTime time)
 {
   GstMatroskaIndex *entry = NULL;
   GstMatroskaReadState current_state;
@@ -1907,7 +1908,7 @@
 }
 
 static gboolean
-gst_matroska_demux_handle_seek_event (GstMatroskaDemux * demux,
+gst_matroska_demux_handle_seek_event (GstMatroskaDemuxH265 * demux,
     GstPad * pad, GstEvent * event)
 {
   GstMatroskaIndex *entry = NULL;
@@ -1976,8 +1977,16 @@
 
   flush = ! !(flags & GST_SEEK_FLAG_FLUSH);
   keyunit = ! !(flags & GST_SEEK_FLAG_KEY_UNIT);
+#ifdef GST_SEEK_FLAG_SNAP_AFTER
   after = ! !(flags & GST_SEEK_FLAG_SNAP_AFTER);
+#else
+  after = FALSE;
+#endif
+#if GST_SEEK_FLAG_SNAP_BEFORE
   before = ! !(flags & GST_SEEK_FLAG_SNAP_BEFORE);
+#else
+  before = FALSE;
+#endif
 
   /* always do full update if flushing, otherwise problems might arise
    * downstream with missing keyframes etc. */
@@ -2180,7 +2189,7 @@
  * function handle seeks to build the seek indexes first.
  */
 static gboolean
-gst_matroska_demux_handle_seek_push (GstMatroskaDemux * demux, GstPad * pad,
+gst_matroska_demux_handle_seek_push (GstMatroskaDemuxH265 * demux, GstPad * pad,
     GstEvent * event)
 {
   GstSeekFlags flags;
@@ -2262,7 +2271,7 @@
 static gboolean
 gst_matroska_demux_handle_src_event (GstPad * pad, GstEvent * event)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (gst_pad_get_parent (pad));
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (gst_pad_get_parent (pad));
   gboolean res = TRUE;
 
   switch (GST_EVENT_TYPE (event)) {
@@ -2318,7 +2327,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_seek_to_previous_keyframe (GstMatroskaDemux * demux)
+gst_matroska_demux_seek_to_previous_keyframe (GstMatroskaDemuxH265 * demux)
 {
   GstFlowReturn ret = GST_FLOW_UNEXPECTED;
   gboolean done = TRUE;
@@ -2371,7 +2380,8 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_parse_tracks (GstMatroskaDemux * demux, GstEbmlRead * ebml)
+gst_matroska_demux_parse_tracks (GstMatroskaDemuxH265 * demux,
+    GstEbmlRead * ebml)
 {
   GstFlowReturn ret = GST_FLOW_OK;
   guint32 id;
@@ -2473,7 +2483,7 @@
  */
 
 static void
-gst_matroska_demux_sync_streams (GstMatroskaDemux * demux)
+gst_matroska_demux_sync_streams (GstMatroskaDemuxH265 * demux)
 {
   gint stream_nr;
 
@@ -2530,7 +2540,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_push_hdr_buf (GstMatroskaDemux * demux,
+gst_matroska_demux_push_hdr_buf (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream, guint8 * data, guint len)
 {
   GstFlowReturn ret, cret;
@@ -2554,7 +2564,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_push_flac_codec_priv_data (GstMatroskaDemux * demux,
+gst_matroska_demux_push_flac_codec_priv_data (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream)
 {
   GstFlowReturn ret;
@@ -2599,7 +2609,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_push_speex_codec_priv_data (GstMatroskaDemux * demux,
+gst_matroska_demux_push_speex_codec_priv_data (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream)
 {
   GstFlowReturn ret;
@@ -2632,7 +2642,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_push_xiph_codec_priv_data (GstMatroskaDemux * demux,
+gst_matroska_demux_push_xiph_codec_priv_data (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream)
 {
   GstFlowReturn ret;
@@ -2689,7 +2699,7 @@
 }
 
 static void
-gst_matroska_demux_push_dvd_clut_change_event (GstMatroskaDemux * demux,
+gst_matroska_demux_push_dvd_clut_change_event (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream)
 {
   gchar *buf, *start;
@@ -3100,8 +3110,8 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_parse_blockgroup_or_simpleblock (GstMatroskaDemux * demux,
-    GstEbmlRead * ebml, guint64 cluster_time, guint64 cluster_offset,
+gst_matroska_demux_parse_blockgroup_or_simpleblock (GstMatroskaDemuxH265 *
+    demux, GstEbmlRead * ebml, guint64 cluster_time, guint64 cluster_offset,
     gboolean is_simpleblock)
 {
   GstMatroskaTrackContext *stream = NULL;
@@ -3736,7 +3746,7 @@
 
 /* return FALSE if block(group) should be skipped (due to a seek) */
 static inline gboolean
-gst_matroska_demux_seek_block (GstMatroskaDemux * demux)
+gst_matroska_demux_seek_block (GstMatroskaDemuxH265 * demux)
 {
   if (G_UNLIKELY (demux->seek_block)) {
     if (!(--demux->seek_block)) {
@@ -3751,7 +3761,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_parse_contents_seekentry (GstMatroskaDemux * demux,
+gst_matroska_demux_parse_contents_seekentry (GstMatroskaDemuxH265 * demux,
     GstEbmlRead * ebml)
 {
   GstFlowReturn ret;
@@ -3905,7 +3915,8 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_parse_contents (GstMatroskaDemux * demux, GstEbmlRead * ebml)
+gst_matroska_demux_parse_contents (GstMatroskaDemuxH265 * demux,
+    GstEbmlRead * ebml)
 {
   GstFlowReturn ret = GST_FLOW_OK;
   guint32 id;
@@ -3954,7 +3965,7 @@
 #define MAX_BLOCK_SIZE (15 * 1024 * 1024)
 
 static inline GstFlowReturn
-gst_matroska_demux_check_read_size (GstMatroskaDemux * demux, guint64 bytes)
+gst_matroska_demux_check_read_size (GstMatroskaDemuxH265 * demux, guint64 bytes)
 {
   if (G_UNLIKELY (bytes > MAX_BLOCK_SIZE)) {
     /* only a few blocks are expected/allowed to be large,
@@ -3978,7 +3989,7 @@
 
 /* returns TRUE if we truely are in error state, and should give up */
 static inline gboolean
-gst_matroska_demux_check_parse_error (GstMatroskaDemux * demux)
+gst_matroska_demux_check_parse_error (GstMatroskaDemuxH265 * demux)
 {
   if (!demux->streaming && demux->next_cluster_offset > 0) {
     /* just repositioning to where next cluster should be and try from there */
@@ -4007,7 +4018,7 @@
 }
 
 static inline GstFlowReturn
-gst_matroska_demux_flush (GstMatroskaDemux * demux, guint flush)
+gst_matroska_demux_flush (GstMatroskaDemuxH265 * demux, guint flush)
 {
   GST_LOG_OBJECT (demux, "skipping %d bytes", flush);
   demux->common.offset += flush;
@@ -4030,7 +4041,7 @@
  * Returns UNEXPECTED if insufficient available,
  * ERROR if too much was attempted to read. */
 static inline GstFlowReturn
-gst_matroska_demux_take (GstMatroskaDemux * demux, guint64 bytes,
+gst_matroska_demux_take (GstMatroskaDemuxH265 * demux, guint64 bytes,
     GstEbmlRead * ebml)
 {
   GstBuffer *buffer = NULL;
@@ -4068,7 +4079,7 @@
 }
 
 static void
-gst_matroska_demux_check_seekability (GstMatroskaDemux * demux)
+gst_matroska_demux_check_seekability (GstMatroskaDemuxH265 * demux)
 {
   GstQuery *query;
   gboolean seekable = FALSE;
@@ -4106,7 +4117,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_find_tracks (GstMatroskaDemux * demux)
+gst_matroska_demux_find_tracks (GstMatroskaDemuxH265 * demux)
 {
   guint32 id;
   guint64 before_pos;
@@ -4162,7 +4173,7 @@
 } G_STMT_END
 
 static GstFlowReturn
-gst_matroska_demux_parse_id (GstMatroskaDemux * demux, guint32 id,
+gst_matroska_demux_parse_id (GstMatroskaDemuxH265 * demux, guint32 id,
     guint64 length, guint needed)
 {
   GstEbmlRead ebml = { 0, };
@@ -4441,7 +4452,7 @@
 static void
 gst_matroska_demux_loop (GstPad * pad)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (pad));
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (pad));
   GstFlowReturn ret;
   guint32 id;
   guint64 length;
@@ -4600,7 +4611,8 @@
  * Create and push a flushing seek event upstream
  */
 static gboolean
-perform_seek_to_offset (GstMatroskaDemux * demux, gdouble rate, guint64 offset)
+perform_seek_to_offset (GstMatroskaDemuxH265 * demux, gdouble rate,
+    guint64 offset)
 {
   GstEvent *event;
   gboolean res = 0;
@@ -4621,7 +4633,7 @@
 static GstFlowReturn
 gst_matroska_demux_chain (GstPad * pad, GstBuffer * buffer)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (pad));
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (pad));
   guint available;
   GstFlowReturn ret = GST_FLOW_OK;
   guint needed = 0;
@@ -4669,7 +4681,7 @@
 gst_matroska_demux_handle_sink_event (GstPad * pad, GstEvent * event)
 {
   gboolean res = TRUE;
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (pad));
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (pad));
 
   GST_DEBUG_OBJECT (demux,
       "have event type %s: %p on sink pad", GST_EVENT_TYPE_NAME (event), event);
@@ -4777,7 +4789,7 @@
 static gboolean
 gst_matroska_demux_sink_activate (GstPad * sinkpad)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (sinkpad));
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (sinkpad));
 
   if (gst_pad_check_pull_range (sinkpad)) {
     GST_DEBUG ("going to pull mode");
@@ -4795,7 +4807,7 @@
 static gboolean
 gst_matroska_demux_sink_activate_pull (GstPad * sinkpad, gboolean active)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (sinkpad));
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (sinkpad));
 
   if (active) {
     /* if we have a scheduler we can start the task */
@@ -5074,6 +5086,27 @@
   } else if (!strcmp (codec_id, GST_MATROSKA_CODEC_ID_VIDEO_VP8)) {
     caps = gst_caps_new_simple ("video/x-vp8", NULL);
     *codec_name = g_strdup_printf ("On2 VP8");
+  } else if (!strcmp (codec_id, GST_MATROSKA_CODEC_ID_VIDEO_MPEGH_HEVC)) {
+    caps = gst_caps_new_simple ("video/x-h265", NULL);
+    if (data) {
+      GstBuffer *priv;
+
+      gst_codec_utils_h265_caps_set_level_tier_and_profile (caps, data + 1,
+          size - 1);
+
+      priv = gst_buffer_new_and_alloc (size);
+      memcpy (GST_BUFFER_DATA (priv), data, size);
+      gst_caps_set_simple (caps, "codec_data", GST_TYPE_BUFFER, priv, NULL);
+      gst_buffer_unref (priv);
+
+      gst_caps_set_simple (caps, "stream-format", G_TYPE_STRING, "hvc1",
+          "alignment", G_TYPE_STRING, "au", NULL);
+    } else {
+      GST_WARNING ("No codec data found, assuming output is byte-stream");
+      gst_caps_set_simple (caps, "stream-format", G_TYPE_STRING, "byte-stream",
+          NULL);
+    }
+    *codec_name = g_strdup_printf ("HEVC");
   } else {
     GST_WARNING ("Unknown codec '%s', cannot build Caps", codec_id);
     return NULL;
@@ -5575,7 +5608,7 @@
 static void
 gst_matroska_demux_set_index (GstElement * element, GstIndex * index)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
 
   GST_OBJECT_LOCK (demux);
   if (demux->common.element_index)
@@ -5590,7 +5623,7 @@
 gst_matroska_demux_get_index (GstElement * element)
 {
   GstIndex *result = NULL;
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
 
   GST_OBJECT_LOCK (demux);
   if (demux->common.element_index)
@@ -5606,7 +5639,7 @@
 gst_matroska_demux_change_state (GstElement * element,
     GstStateChange transition)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
   GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
 
   /* handle upwards state changes here */
@@ -5633,7 +5666,7 @@
 gst_matroska_demux_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec)
 {
-  GstMatroskaDemux *demux;
+  GstMatroskaDemuxH265 *demux;
 
   g_return_if_fail (GST_IS_MATROSKA_DEMUX (object));
   demux = GST_MATROSKA_DEMUX (object);
@@ -5654,7 +5687,7 @@
 gst_matroska_demux_get_property (GObject * object,
     guint prop_id, GValue * value, GParamSpec * pspec)
 {
-  GstMatroskaDemux *demux;
+  GstMatroskaDemuxH265 *demux;
 
   g_return_if_fail (GST_IS_MATROSKA_DEMUX (object));
   demux = GST_MATROSKA_DEMUX (object);
@@ -5682,7 +5715,10 @@
 
   /* create an elementfactory for the matroska_demux element */
   if (!gst_element_register (plugin, "matroskademux",
-          GST_RANK_PRIMARY, GST_TYPE_MATROSKA_DEMUX))
+          GST_RANK_PRIMARY + 1, GST_TYPE_MATROSKA_DEMUX))
+    return FALSE;
+  if (!gst_element_register (plugin, "matroskademux-libde265",
+          GST_RANK_PRIMARY + 1, GST_TYPE_MATROSKA_DEMUX))
     return FALSE;
 
   return TRUE;
diff -Nur '--exclude=*~' '--exclude=*.o' '--exclude=README.txt' '--exclude=*.diff' '--exclude=*.vcproj' '--exclude=Makefile*' '--exclude=COPYING' gst-plugins-good/gst/matroska/matroska-demux.h src/matroska/0.10/matroska-demux.h
--- gst-plugins-good/gst/matroska/matroska-demux.h	2014-06-23 18:21:36.000000000 +0200
+++ src/matroska/0.10/matroska-demux.h	2014-01-17 09:51:05.000000000 +0100
@@ -34,15 +34,15 @@
 #define GST_TYPE_MATROSKA_DEMUX \
   (gst_matroska_demux_get_type ())
 #define GST_MATROSKA_DEMUX(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_MATROSKA_DEMUX, GstMatroskaDemux))
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_MATROSKA_DEMUX, GstMatroskaDemuxH265))
 #define GST_MATROSKA_DEMUX_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_MATROSKA_DEMUX, GstMatroskaDemuxClass))
+  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_MATROSKA_DEMUX, GstMatroskaDemuxH265Class))
 #define GST_IS_MATROSKA_DEMUX(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_MATROSKA_DEMUX))
 #define GST_IS_MATROSKA_DEMUX_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_MATROSKA_DEMUX))
 
-typedef struct _GstMatroskaDemux {
+typedef struct _GstMatroskaDemuxH265 {
   GstElement              parent;
 
   /* < private > */
@@ -102,11 +102,11 @@
 
   /* for non-finalized files, with invalid segment duration */
   gboolean                 invalid_duration;
-} GstMatroskaDemux;
+} GstMatroskaDemuxH265;
 
-typedef struct _GstMatroskaDemuxClass {
+typedef struct _GstMatroskaDemuxH265Class {
   GstElementClass parent;
-} GstMatroskaDemuxClass;
+} GstMatroskaDemuxH265Class;
 
 gboolean gst_matroska_demux_plugin_init (GstPlugin *plugin);
 
diff -Nur '--exclude=*~' '--exclude=*.o' '--exclude=README.txt' '--exclude=*.diff' '--exclude=*.vcproj' '--exclude=Makefile*' '--exclude=COPYING' gst-plugins-good/gst/matroska/matroska-ids.h src/matroska/0.10/matroska-ids.h
--- gst-plugins-good/gst/matroska/matroska-ids.h	2014-06-23 18:21:36.000000000 +0200
+++ src/matroska/0.10/matroska-ids.h	2014-01-17 09:51:05.000000000 +0100
@@ -345,6 +345,7 @@
 #define GST_MATROSKA_CODEC_ID_VIDEO_SNOW         "V_SNOW"
 #define GST_MATROSKA_CODEC_ID_VIDEO_DIRAC        "V_DIRAC"
 #define GST_MATROSKA_CODEC_ID_VIDEO_VP8          "V_VP8"
+#define GST_MATROSKA_CODEC_ID_VIDEO_MPEGH_HEVC   "V_MPEGH/ISO/HEVC"
 
 #define GST_MATROSKA_CODEC_ID_AUDIO_MPEG1_L1       "A_MPEG/L1"
 #define GST_MATROSKA_CODEC_ID_AUDIO_MPEG1_L2       "A_MPEG/L2"
diff -Nur '--exclude=*~' '--exclude=*.o' '--exclude=README.txt' '--exclude=*.diff' '--exclude=*.vcproj' '--exclude=Makefile*' '--exclude=COPYING' gst-plugins-good/gst/matroska/matroska-parse.c src/matroska/0.10/matroska-parse.c
--- gst-plugins-good/gst/matroska/matroska-parse.c	2014-06-23 18:21:36.000000000 +0200
+++ src/matroska/0.10/matroska-parse.c	2014-07-07 17:05:11.000000000 +0200
@@ -96,7 +96,7 @@
     GST_STATIC_CAPS ("video/x-matroska; video/webm")
     );
 
-static GstFlowReturn gst_matroska_parse_parse_id (GstMatroskaParse * parse,
+static GstFlowReturn gst_matroska_parse_parse_id (GstMatroskaParseH265 * parse,
     guint32 id, guint64 length, guint needed);
 
 /* element functions */
@@ -108,8 +108,8 @@
     GstQuery * query);
 
 /* pad functions */
-static gboolean gst_matroska_parse_handle_seek_event (GstMatroskaParse * parse,
-    GstPad * pad, GstEvent * event);
+static gboolean gst_matroska_parse_handle_seek_event (GstMatroskaParseH265 *
+    parse, GstPad * pad, GstEvent * event);
 static gboolean gst_matroska_parse_handle_src_event (GstPad * pad,
     GstEvent * event);
 static const GstQueryType *gst_matroska_parse_get_src_query_types (GstPad *
@@ -131,11 +131,11 @@
 
 /* stream methods */
 static void gst_matroska_parse_reset (GstElement * element);
-static gboolean perform_seek_to_offset (GstMatroskaParse * parse,
+static gboolean perform_seek_to_offset (GstMatroskaParseH265 * parse,
     guint64 offset);
 
 GType gst_matroska_parse_get_type (void);
-GST_BOILERPLATE (GstMatroskaParse, gst_matroska_parse, GstElement,
+GST_BOILERPLATE (GstMatroskaParseH265, gst_matroska_parse, GstElement,
     GST_TYPE_ELEMENT);
 
 static void
@@ -155,7 +155,7 @@
 static void
 gst_matroska_parse_finalize (GObject * object)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (object);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (object);
 
   if (parse->common.src) {
     g_ptr_array_free (parse->common.src, TRUE);
@@ -173,7 +173,7 @@
 }
 
 static void
-gst_matroska_parse_class_init (GstMatroskaParseClass * klass)
+gst_matroska_parse_class_init (GstMatroskaParseH265Class * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
   GstElementClass *gstelement_class = (GstElementClass *) klass;
@@ -197,8 +197,8 @@
 }
 
 static void
-gst_matroska_parse_init (GstMatroskaParse * parse,
-    GstMatroskaParseClass * klass)
+gst_matroska_parse_init (GstMatroskaParseH265 * parse,
+    GstMatroskaParseH265Class * klass)
 {
   parse->common.sinkpad = gst_pad_new_from_static_template (&sink_templ,
       "sink");
@@ -274,7 +274,7 @@
 static void
 gst_matroska_parse_reset (GstElement * element)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
   guint i;
 
   GST_DEBUG_OBJECT (parse, "Resetting state");
@@ -386,7 +386,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_add_stream (GstMatroskaParse * parse, GstEbmlRead * ebml)
+gst_matroska_parse_add_stream (GstMatroskaParseH265 * parse, GstEbmlRead * ebml)
 {
   GstMatroskaTrackContext *context;
   GstFlowReturn ret;
@@ -1090,7 +1090,7 @@
 }
 
 static gboolean
-gst_matroska_parse_query (GstMatroskaParse * parse, GstPad * pad,
+gst_matroska_parse_query (GstMatroskaParseH265 * parse, GstPad * pad,
     GstQuery * query)
 {
   gboolean res = FALSE;
@@ -1190,7 +1190,7 @@
 gst_matroska_parse_handle_src_query (GstPad * pad, GstQuery * query)
 {
   gboolean ret;
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (gst_pad_get_parent (pad));
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (gst_pad_get_parent (pad));
 
   ret = gst_matroska_parse_query (parse, pad, query);
 
@@ -1203,7 +1203,7 @@
  * otherwise TRUE (whatever the outcome of event sending),
  * takes ownership of the passed event! */
 static gboolean
-gst_matroska_parse_send_event (GstMatroskaParse * parse, GstEvent * event)
+gst_matroska_parse_send_event (GstMatroskaParseH265 * parse, GstEvent * event)
 {
   gboolean ret = FALSE;
 
@@ -1220,7 +1220,7 @@
 static gboolean
 gst_matroska_parse_element_send_event (GstElement * element, GstEvent * event)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
   gboolean res;
 
   g_return_val_if_fail (event != NULL, FALSE);
@@ -1239,7 +1239,7 @@
 /* searches for a cluster start from @pos,
  * return GST_FLOW_OK and cluster position in @pos if found */
 static GstFlowReturn
-gst_matroska_parse_search_cluster (GstMatroskaParse * parse, gint64 * pos)
+gst_matroska_parse_search_cluster (GstMatroskaParseH265 * parse, gint64 * pos)
 {
   gint64 newpos = *pos;
   gint64 orig_offset;
@@ -1327,7 +1327,7 @@
 
 
 static gboolean
-gst_matroska_parse_handle_seek_event (GstMatroskaParse * parse,
+gst_matroska_parse_handle_seek_event (GstMatroskaParseH265 * parse,
     GstPad * pad, GstEvent * event)
 {
   GstMatroskaIndex *entry = NULL;
@@ -1391,7 +1391,7 @@
  * function handle seeks to build the seek indexes first.
  */
 static gboolean
-gst_matroska_parse_handle_seek_push (GstMatroskaParse * parse, GstPad * pad,
+gst_matroska_parse_handle_seek_push (GstMatroskaParseH265 * parse, GstPad * pad,
     GstEvent * event)
 {
   GstSeekFlags flags;
@@ -1473,7 +1473,7 @@
 static gboolean
 gst_matroska_parse_handle_src_event (GstPad * pad, GstEvent * event)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (gst_pad_get_parent (pad));
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (gst_pad_get_parent (pad));
   gboolean res = TRUE;
 
   switch (GST_EVENT_TYPE (event)) {
@@ -1526,7 +1526,8 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_tracks (GstMatroskaParse * parse, GstEbmlRead * ebml)
+gst_matroska_parse_parse_tracks (GstMatroskaParseH265 * parse,
+    GstEbmlRead * ebml)
 {
   GstFlowReturn ret = GST_FLOW_OK;
   guint32 id;
@@ -1623,8 +1624,8 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_blockgroup_or_simpleblock (GstMatroskaParse * parse,
-    GstEbmlRead * ebml, guint64 cluster_time, guint64 cluster_offset,
+gst_matroska_parse_parse_blockgroup_or_simpleblock (GstMatroskaParseH265 *
+    parse, GstEbmlRead * ebml, guint64 cluster_time, guint64 cluster_offset,
     gboolean is_simpleblock)
 {
   GstMatroskaTrackContext *stream = NULL;
@@ -2157,7 +2158,7 @@
 
 /* return FALSE if block(group) should be skipped (due to a seek) */
 static inline gboolean
-gst_matroska_parse_seek_block (GstMatroskaParse * parse)
+gst_matroska_parse_seek_block (GstMatroskaParseH265 * parse)
 {
   if (G_UNLIKELY (parse->seek_block)) {
     if (!(--parse->seek_block)) {
@@ -2172,7 +2173,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_contents_seekentry (GstMatroskaParse * parse,
+gst_matroska_parse_parse_contents_seekentry (GstMatroskaParseH265 * parse,
     GstEbmlRead * ebml)
 {
   GstFlowReturn ret;
@@ -2288,7 +2289,8 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_contents (GstMatroskaParse * parse, GstEbmlRead * ebml)
+gst_matroska_parse_parse_contents (GstMatroskaParseH265 * parse,
+    GstEbmlRead * ebml)
 {
   GstFlowReturn ret = GST_FLOW_OK;
   guint32 id;
@@ -2333,7 +2335,7 @@
 #define MAX_BLOCK_SIZE (15 * 1024 * 1024)
 
 static inline GstFlowReturn
-gst_matroska_parse_check_read_size (GstMatroskaParse * parse, guint64 bytes)
+gst_matroska_parse_check_read_size (GstMatroskaParseH265 * parse, guint64 bytes)
 {
   if (G_UNLIKELY (bytes > MAX_BLOCK_SIZE)) {
     /* only a few blocks are expected/allowed to be large,
@@ -2350,7 +2352,7 @@
 
 /* returns TRUE if we truely are in error state, and should give up */
 static inline gboolean
-gst_matroska_parse_check_parse_error (GstMatroskaParse * parse)
+gst_matroska_parse_check_parse_error (GstMatroskaParseH265 * parse)
 {
   gint64 pos;
 
@@ -2373,7 +2375,7 @@
  * Returns UNEXPECTED if insufficient available,
  * ERROR if too much was attempted to read. */
 static inline GstFlowReturn
-gst_matroska_parse_take (GstMatroskaParse * parse, guint64 bytes,
+gst_matroska_parse_take (GstMatroskaParseH265 * parse, guint64 bytes,
     GstEbmlRead * ebml)
 {
   GstBuffer *buffer = NULL;
@@ -2401,7 +2403,7 @@
 }
 
 static void
-gst_matroska_parse_check_seekability (GstMatroskaParse * parse)
+gst_matroska_parse_check_seekability (GstMatroskaParseH265 * parse)
 {
   GstQuery *query;
   gboolean seekable = FALSE;
@@ -2440,7 +2442,7 @@
 
 #if 0
 static GstFlowReturn
-gst_matroska_parse_find_tracks (GstMatroskaParse * parse)
+gst_matroska_parse_find_tracks (GstMatroskaParseH265 * parse)
 {
   guint32 id;
   guint64 before_pos;
@@ -2497,7 +2499,7 @@
 } G_STMT_END
 
 static void
-gst_matroska_parse_accumulate_streamheader (GstMatroskaParse * parse,
+gst_matroska_parse_accumulate_streamheader (GstMatroskaParseH265 * parse,
     GstBuffer * buffer)
 {
   if (parse->pushed_headers) {
@@ -2520,7 +2522,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_output (GstMatroskaParse * parse, GstBuffer * buffer,
+gst_matroska_parse_output (GstMatroskaParseH265 * parse, GstBuffer * buffer,
     gboolean keyframe)
 {
   GstFlowReturn ret = GST_FLOW_OK;
@@ -2577,7 +2579,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_id (GstMatroskaParse * parse, guint32 id,
+gst_matroska_parse_parse_id (GstMatroskaParseH265 * parse, guint32 id,
     guint64 length, guint needed)
 {
   GstEbmlRead ebml = { 0, };
@@ -2871,7 +2873,7 @@
 static void
 gst_matroska_parse_loop (GstPad * pad)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
   GstFlowReturn ret;
   guint32 id;
   guint64 length;
@@ -3012,7 +3014,7 @@
  * Create and push a flushing seek event upstream
  */
 static gboolean
-perform_seek_to_offset (GstMatroskaParse * parse, guint64 offset)
+perform_seek_to_offset (GstMatroskaParseH265 * parse, guint64 offset)
 {
   GstEvent *event;
   gboolean res = 0;
@@ -3033,7 +3035,7 @@
 static GstFlowReturn
 gst_matroska_parse_chain (GstPad * pad, GstBuffer * buffer)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
   guint available;
   GstFlowReturn ret = GST_FLOW_OK;
   guint needed = 0;
@@ -3081,7 +3083,7 @@
 gst_matroska_parse_handle_sink_event (GstPad * pad, GstEvent * event)
 {
   gboolean res = TRUE;
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
 
   GST_DEBUG_OBJECT (parse,
       "have event type %s: %p on sink pad", GST_EVENT_TYPE_NAME (event), event);
@@ -3174,7 +3176,7 @@
 static void
 gst_matroska_parse_set_index (GstElement * element, GstIndex * index)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
 
   GST_OBJECT_LOCK (parse);
   if (parse->common.element_index)
@@ -3189,7 +3191,7 @@
 gst_matroska_parse_get_index (GstElement * element)
 {
   GstIndex *result = NULL;
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
 
   GST_OBJECT_LOCK (parse);
   if (parse->common.element_index)
@@ -3205,7 +3207,7 @@
 gst_matroska_parse_change_state (GstElement * element,
     GstStateChange transition)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
   GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
 
   /* handle upwards state changes here */
@@ -3235,7 +3237,10 @@
 
   /* create an elementfactory for the matroska_parse element */
   if (!gst_element_register (plugin, "matroskaparse",
-          GST_RANK_NONE, GST_TYPE_MATROSKA_PARSE))
+          GST_RANK_NONE + 1, GST_TYPE_MATROSKA_PARSE))
+    return FALSE;
+  if (!gst_element_register (plugin, "matroskaparse-libde265",
+          GST_RANK_NONE + 1, GST_TYPE_MATROSKA_PARSE))
     return FALSE;
 
   return TRUE;
diff -Nur '--exclude=*~' '--exclude=*.o' '--exclude=README.txt' '--exclude=*.diff' '--exclude=*.vcproj' '--exclude=Makefile*' '--exclude=COPYING' gst-plugins-good/gst/matroska/matroska-parse.h src/matroska/0.10/matroska-parse.h
--- gst-plugins-good/gst/matroska/matroska-parse.h	2014-06-23 18:08:32.000000000 +0200
+++ src/matroska/0.10/matroska-parse.h	2014-01-17 09:51:05.000000000 +0100
@@ -34,15 +34,15 @@
 #define GST_TYPE_MATROSKA_PARSE \
   (gst_matroska_parse_get_type ())
 #define GST_MATROSKA_PARSE(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_MATROSKA_PARSE, GstMatroskaParse))
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_MATROSKA_PARSE, GstMatroskaParseH265))
 #define GST_MATROSKA_PARSE_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_MATROSKA_PARSE, GstMatroskaParseClass))
+  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_MATROSKA_PARSE, GstMatroskaParseH265Class))
 #define GST_IS_MATROSKA_PARSE(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_MATROSKA_PARSE))
 #define GST_IS_MATROSKA_PARSE_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_MATROSKA_PARSE))
 
-typedef struct _GstMatroskaParse {
+typedef struct _GstMatroskaParseH265 {
   GstElement              parent;
 
   /* < private > */
@@ -93,11 +93,11 @@
   /* reverse playback */
   GArray                  *seek_index;
   gint                     seek_entry;
-} GstMatroskaParse;
+} GstMatroskaParseH265;
 
-typedef struct _GstMatroskaParseClass {
+typedef struct _GstMatroskaParseH265Class {
   GstElementClass parent;
-} GstMatroskaParseClass;
+} GstMatroskaParseH265Class;
 
 gboolean gst_matroska_parse_plugin_init (GstPlugin *plugin);
 
diff -Nur '--exclude=*~' '--exclude=*.o' '--exclude=README.txt' '--exclude=*.diff' '--exclude=*.vcproj' '--exclude=Makefile*' '--exclude=COPYING' gst-plugins-good/gst/matroska/webm-mux.c src/matroska/0.10/webm-mux.c
--- gst-plugins-good/gst/matroska/webm-mux.c	2014-06-23 18:21:36.000000000 +0200
+++ src/matroska/0.10/webm-mux.c	2014-05-07 09:34:26.000000000 +0200
@@ -90,8 +90,7 @@
       &webm_videosink_templ);
   gst_element_class_add_static_pad_template (gstelement_class,
       &webm_audiosink_templ);
-  gst_element_class_add_static_pad_template (gstelement_class,
-      &webm_src_templ);
+  gst_element_class_add_static_pad_template (gstelement_class, &webm_src_templ);
   gst_element_class_set_details_simple (gstelement_class, "WebM muxer",
       "Codec/Muxer",
       "Muxes video and audio streams into a WebM stream",
